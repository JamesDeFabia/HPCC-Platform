<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="HAVING">
  <title>HAVING</title>

  <para><emphasis role="bold">HAVING<indexterm>
      <primary>HAVING</primary>
    </indexterm><indexterm>
      <primary>HAVING function</primary>
    </indexterm>(</emphasis><emphasis> groupdataset, expression </emphasis>
  <emphasis role="bold">[, UNORDERED | ORDERED(</emphasis> <emphasis>bool
  </emphasis><emphasis role="bold">) ] [, STABLE | UNSTABLE ] [, PARALLEL [
  (</emphasis> <emphasis>numthreads </emphasis><emphasis role="bold">) ] ] [,
  ALGORITHM(</emphasis> <emphasis>name </emphasis><emphasis role="bold">) ]
  )</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="82.45pt"/>

        <colspec colwidth="306.35pt"/>

        <tbody>
          <row>
            <entry><emphasis>groupdataset</emphasis></entry>

            <entry>O nome de um conjunto de registro GROUPed.</entry>
          </row>

          <row>
            <entry><emphasis>expression</emphasis></entry>

            <entry>A expressão lógica pela qual os grupos serão
            filtrados.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNORDERED</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de resultado
            não é importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ORDERED</emphasis></entry>

            <entry>Especifica a importância da ordem do registro de
            resultado.</entry>
          </row>

          <row>
            <entry><emphasis>bool</emphasis></entry>

            <entry>Quando for “False” (Falso), especifica que a ordem do
            registro de resultado não é importante. Quando for “True’
            (Verdadeiro), especifica a ordem padrão do registro de
            resultado.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">STABLE</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de entrada é
            importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNSTABLE</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de entrada não
            é importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">PARALLEL</emphasis></entry>

            <entry>Opcional. Tenta avaliar essa atividade em paralelo.</entry>
          </row>

          <row>
            <entry><emphasis>numthreads</emphasis></entry>

            <entry>Opcional. Tenta avaliar essa atividade usando
            <emphasis>numthreads</emphasis> threads</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ALGORITHM</emphasis></entry>

            <entry>Opcional. Substitui o algoritmo usado para essa
            atividade.</entry>
          </row>

          <row>
            <entry><emphasis>name</emphasis></entry>

            <entry>O algoritmo a ser usado para essa atividade. Precisa fazer
            parte da lista de algoritmos compatíveis com as opções STABLE e
            UNSTABLE da função SORT.</entry>
          </row>

          <row>
            <entry>Return:</entry>

            <entry>HAVING retornos um conjunto de registro GROUPed.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>A função <emphasis role="bold">HAVING</emphasis> retorna um conjunto
  de registros GROUPed&gt; que contém apenas os grupos para os quais a
  <emphasis>expressão</emphasis> é “true” (verdadeira). Isso é semelhante a
  cláusula HAVING no SQL. <emphasis role="bold"/></para>

  <para>Exemplo:</para>

  <programlisting lang="ECL_Runnable">personRecord := RECORD
STRING UID;
STRING first_name;
STRING last_name;
STRING address;
STRING city;
STRING state;
STRING zip;
STRING SSN
END;
person := DATASET([{'923','James','Jones','123 Elm Street','Hollywood','FL','33022','000-423-6567'},
{'924','Sally','Jones','22 Main Street','Tampa','FL','33604','000-123-4567'},
{'925','Jose','Gomez','111 Biscaya Lane','Miami','FL','33101','000-123-3383'},
{'926','Adam','Wesson','77 Sunset Blvd','Boston','MA','02108','000-123-4464'},
{'927','Evelyn','Murray','740 SW 10th Street','Boston ','MA','02116','000-123-5556'},
{'928','Joe','Yung','7511 Simson Avenue','Chicago','IL','60131','000-123-7890'}], personRecord);

MyGroups := GROUP(SORT(Person,state),state);
     //group by state
Filtered := HAVING(MyGroups,COUNT(ROWS(LEFT)) &gt; 1);
     //filter out the small groups
OUTPUT(Filtered);
</programlisting>

  <para>Ver também: <link linkend="GROUP">GROUP</link></para>
</sect1>
