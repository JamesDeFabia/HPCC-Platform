<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="GRAPH">
  <title>GRAPH</title>

  <para><emphasis role="bold">GRAPH<indexterm>
      <primary>GRAPH</primary>
    </indexterm><indexterm>
      <primary>GRAPH function</primary>
    </indexterm>( </emphasis><emphasis>recordset , iterations
  </emphasis><emphasis role="bold">, </emphasis><emphasis>
  processor</emphasis> <emphasis role="bold">[, UNORDERED |
  ORDERED(</emphasis> <emphasis>bool </emphasis><emphasis role="bold">) ] [,
  STABLE | UNSTABLE ] [, PARALLEL [ (</emphasis> <emphasis>numthreads
  </emphasis><emphasis role="bold">) ] ] [, ALGORITHM(</emphasis>
  <emphasis>name </emphasis><emphasis role="bold">) ] )</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="79.60pt"/>

        <colspec/>

        <tbody>
          <row>
            <entry><emphasis>recordset</emphasis></entry>

            <entry>O conjunto de registros inicial a ser processado.</entry>
          </row>

          <row>
            <entry><emphasis>iterations</emphasis></entry>

            <entry>O número de vezes que a função processor (processador) será
            acionada.</entry>
          </row>

          <row>
            <entry><emphasis>processor</emphasis></entry>

            <entry>O atributo da função que processará a entrada. Esta função
            pode usar o seguinte como argumentos:</entry>
          </row>

          <row>
            <entry/>

            <entry><programlisting lang="text" role="tab"><emphasis
                  role="bold">ROWSET<indexterm>
                    <primary>ROWSET</primary>
                  </indexterm>LEFT<indexterm>
                    <primary>ROWSET(LEFT)</primary>
                  </indexterm>   </emphasis>Especifica o conjunto de datasets de entrada que podem ser indexados
                                para especificar o recordset de qualquer iteração específica – 
                                ROWSET(LEFT)[0] indica o  <emphasis>recordset</emphasis>  de entrada inicial, enquanto 
                                ROWSET(LEFT)[1] indica o conjunto de resultado  da primeira 
                                iteração. Também pode ser usado como o primeiro parâmetro
                                da função RANGE para especificar um conjunto de datasets
                               (permitindo que o gráfico processe de forma eficiente os argumentos 
                                N-ary merge/join<indexterm>
                  <primary>N-ary merge/join</primary>
                </indexterm>).

<emphasis role="bold">COUNTER</emphasis><indexterm>
                  <primary>COUNTER</primary>
                </indexterm>             Especifica um parâmetro INTEGER para o número de iteração gráfica.
</programlisting></entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNORDERED</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de resultado
            não é importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ORDERED</emphasis></entry>

            <entry>Especifica a importância da ordem do registro de
            resultado.</entry>
          </row>

          <row>
            <entry><emphasis>bool</emphasis></entry>

            <entry>Quando for “False” (Falso), especifica que a ordem do
            registro de resultado não é importante. Quando for “True’
            (Verdadeiro), especifica a ordem padrão do registro de
            resultado.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">STABLE</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de entrada é
            importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNSTABLE</emphasis></entry>

            <entry>Opcional. Especifica que a ordem do registro de entrada não
            é importante.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">PARALLEL</emphasis></entry>

            <entry>Opcional. Tenta avaliar essa atividade em paralelo.</entry>
          </row>

          <row>
            <entry><emphasis>numthreads</emphasis></entry>

            <entry>Opcional. Tenta avaliar essa atividade usando os
            <emphasis>numthreads</emphasis> threads</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ALGORITHM</emphasis></entry>

            <entry>Opcional. Substitui o algoritmo usado para essa
            atividade.</entry>
          </row>

          <row>
            <entry><emphasis>name</emphasis></entry>

            <entry>O algoritmo a ser usado para essa atividade. Precisa fazer
            parte da lista de algoritmos compatíveis com as opções STABLE e
            UNSTABLE da função SORT.</entry>
          </row>

          <row>
            <entry>Return:</entry>

            <entry>GRAPH retorna o resultado do conjunto de registro da última
            <emphasis>iteração</emphasis>.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>A função <emphasis role="bold">GRAPH </emphasis> é semelhante a função
  LOOP <indexterm>
      <primary>LOOP function</primary>
    </indexterm>, porém é executada como se todas as
  <emphasis>iterações</emphasis> de acionamento do
  <emphasis>processador</emphasis> tivessem sido expandidas, removendo
  quaisquer ramificações que não pudessem ser executadas e depois unidas. O
  gráfico resultante é tão eficiente quanto se estivesse sido expandido à
  mão.</para>

  <para>Esta função é chamada GRAPH porque cria um gráfico de execução em
  tempo de execução (normalmente usado em consultas ROXIE) a partir de uma
  coleção de componentes em tempo de compilação. A palavra-chave ROWSET(LEFT)
  indica que cada iteração adiciona seu resultado ao SET OF DATASETs passado
  para a próxima iteração. Isso significa que o resultado de cada iteração
  deve ser um dataset no mesmo formato do parâmetro
  <emphasis>recordset</emphasis> de entrada inicial. O uso típico da função
  GRAPH() seria em consultas para as quais cada iteração subsequente requer
  acesso a qualquer/todos os resultados das iterações anteriores.</para>

  <para>Exemplo:</para>

  <programlisting lang="ECL_Runnable">//This simple example demonstrates text searching 
// for a variable number of search terms.
//For simplicity's sake this example uses sets,
// whereas in a production query you would most likely
// use inverted indexes into your huge datasets.

IMPORT Std;
//layout of the dataset containing text to search:
Rec := {UNSIGNED1 RecID, STRING line};
//The text search function:
SearchText(STRING SearchFor, DATASET(Rec) SearchIn) := FUNCTION
  //uppercase  and clean the data:
  Ltrs := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  Upper(STRING s) := Std.Str.toUpperCase(s);
  LosePunc(STRING s) := STD.Str.SubstituteExcluded(Upper(s),Ltrs,' ');

  //create a set of words:
  SetWords(STRING s) := Std.Str.SplitWords(s,' ');

  //the set of words to search for:
  SearchWords := SetWords(LosePunc(SearchFor));

  //split the text lines to search into sets of words:
  LineWords :=
    PROJECT(SearchIn,
            TRANSFORM({UNSIGNED1 RecID,SET OF STRING wordset},
                      SELF.wordset := SetWords(LosePunc(LEFT.line)),
                      SELF := LEFT));

  //the graph processor function:
  GraphWork(SET OF DATASET(RECORDOF(LineWords)) ds, UNSIGNED4 C) := FUNCTION
    //find all matches for the current iteration's word:
    NewMatches := LineWords(SearchWords[C] IN wordset);
    //return only those lines that were also in
    // the previous iteration's result:
    RETURN JOIN(ds[C-1],NewMatches,LEFT.RecID = RIGHT.RecID);
  END;      
  GraphRes := GRAPH(LineWords,
                    COUNT(SearchWords),
                    GraphWork(ROWSET(LEFT),COUNTER));

  //Return original records where all search terms were found:

  RETURN SearchIn(RecID IN SET(GraphRes,RecID));
END;

ds1 := DATASET([{1,'It is a truth universally acknowledged, that a single man' +
                   ' in possession of a good fortune, must be in want of a wife.'},
                {2,'"My dear Mr. Bennet," said his lady to him one day,' +
                   ' "have you heard that Netherfield Park is let at last?"'},
                {3,'Mr. Bennet replied that he had not.'},
                {4,'"But it is," returned she; "for Mrs. Long has just been here,' +
                   ' and she told me all about it."'},
                {5,'Mr. Bennet made no answer.'},
                {6,'"Do you not want to know who has taken it?" cried his' +
                   ' wife impatiently.'},
                {7,'"You want to tell me, and I have no objection to hearing it."'}],Rec);

SearchText('Mr. Bennet',ds1);       //returns 2, 3, 5
SearchText('Mr. Bennet said',ds1);  //returns 2
</programlisting>

  <para>Ver também: <link linkend="LOOP">LOOP</link>, <link
  linkend="RANGE">RANGE</link></para>
</sect1>
